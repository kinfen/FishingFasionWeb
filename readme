首先：每一个json的type都是用于认别的，没有程式会使用，可以不必关注
下面都是原始的json数据，尽量不要调整属性的名字，如果相似格式数据可以考虑合并为一个接口，但需要标明修改后的对应关系。


categorys.json
参数：首页栏目需要的数据，可以不传id。

格式:
{
	"type" : "categorys",
	"data" : [
		{
			"name" : "BRANK",
			"pic" : "/img/category/brand.png",
			"name_cn" : "品牌介绍"
		},
		{
			"name" : "POSTER",
			"pic" : "/img/category/poster.png",
			"name_cn" : "海报大片"
		}
		...
	]
}

collocation.json
sets_category.json
sets_list.json
产品搭配的三个页面由这三个json支撑

sets_category.json对应产品搭配中的系统主题，需要系统的logo以及系列的图片、标题，list中每一项数据对应设计中一个方格的数据，每一个系统的数据对应设计中一个大页的数据
sets_list.json 需要给个id读取指定内容，id对应sets_category.json中的sid 对应某个特定系统中点击某个方格后产生的数据，每一项数据对应款式分类那个方格设计的一张图片。
collocation.json  设计表现为苹果的cover flow 效果，右上角有产品信息信息，内容由sets_list.json中的id指定读取。

display_windows.json
店铺陈列的厨窗显示，目前未知是否有id指定内容的需求。


gallary.json
seasons_pics.json
当季故事栏目的两个支撑json,
seasons_pics.json是主要栏目数据，每一项season数据表示左边菜单的季节数据，gallary项的六项数据表示右边的三个字，

在gallary.json中通过seasons_pics.json的gallary对象的id值读取详细的图片数据，形成大图展示。


histories_list.json
simplewin_des.json
品版历程的支撑数据，应该不需要传id,但需要根据数据中的id调出一个simplewin_des.json的数据。


intro_content.html
公司简介的右边文字内容支撑
intro.json
公司简介的左边图片

login.json
登录返回数据，登录目前提供用户名，密码，username,psw吧你改好后我再调整


news_content.html
wharf_news.json
新闻资讯的支撑接口，json为列表数据，content.html根据id调出的内容数据，你懂的


poster_category.json
海报大片的主要支撑接口，pic对应cover flow 中的栏目图片，gallary对应图片点开后的大图及预览图列表。

regist.json
你懂的，接口只接供username,psw,你懂的

search_list.json
搜索接口，只提供keyword，预计返回的是与set_list.json一样的数据。

store_display.json
店铺陈列的主要json,看目录中有三个栏目的陈列数据，需要使用id读取指定栏目数据。

stories_main.json
品牌介绍主页的数据，gallary为上面大图数据，category为下面三个栏目的图片及名字

stories.html
品牌介绍的内容页面，应该可以不作发布

study_document.json
培训学习的数据接口，目前只处理两数附件
{
			"id" : 1,
			"name" : "培训文档1",
			"type" : "document",
			"source" : "http://127.0.0.1/~apple/fishing/doc/ShareSDK集成文档.pdf"
		},
		{
			"id" : 2,
			"name" : "培训视频1",
			"type" : "video",
			"source" : "http://127.0.0.1/~apple/fishing/video/1830.mp4"
		}
type为document即为pdf,type为video即为mp4,id在这里应该无实际作用



video_list.json
视频欣赏的支持数据

wharf_clothing_care.json
衣服护理栏目的大图数据，应该不需要指定id

wharf_main.json
渔人码头栏目的主页接品数据，分别指定四大内页的图片及名字

wharf_team.json
渔民同乐的图片列表


## 7.5 add by kinfen

display_category.json

"cid" : 1,
"name" : "季节陈列指引",
"templet" : "pic"
	
对应店铺陈列的四个子栏目，分两种模板pic,list, cid为栏目id, pic模板需要cid, list模板因为是特别的模板故不需要cid,程序中并不使用。
其中cid用于调用接口/json/storedisplay?id=?

map_btn_config.json

"tag" : 3, 
"name_cn" : "新疆" ,
 "name" : "XIN JIANG",
 "id" : 1

 店铺列表各省设置文件，是否动态发布需要视乎需求，tag的值及name_cn的值一一对应，不能修改，name可以手动修改为对应大写拼音，name_cn或id用于storelist.html的参数使用
		
storelist.html
店铺列表内容静态html,需要发布，参数视接口设计需要可使用province对应map_btn_config的name_cn,或者id对应map_btn_config的id


## 7.7 add by kinfen

history_list的结构内容由
		{"id":1234, "preview":"/img/stories/cat1.png", "time":"2010"},
更改为
		{"id":1234, "preview":"/img/stories/cat1.png", "name_cn":"蓝印花", "name":"BLUE PRINT", "time":"2010"},

simeplewin_des.json 接口及其内容不再被项目使用
相应的内容改由simplewin.html为模板进行发布，参数传递与simple_des.json一致



##7.9 add by kinfen 主要增加问卷调查以及反馈的接口

questionnaire.json
该文件需要传值，因为问卷栏目分开员工以及顾客两种，最少两套卷，为保证问卷可以更新，拟使用user=staff或user=client区别，由后台决定哪套问卷。
结构见下：
	"id" : 1,   //问卷id
	"questions" : [
		{
			"id" : 1, //问题id
			"question" : "问题1",
			"choice" : ["选择1", "选择2", "选择3","选择14", "选择5", "选择6"],
			"type" : 0  //问题类型 0-单选, 1-多选, 2-问答
		},

questionsubmit.json
问卷提交接口，传参可用id=? , 是否还需要用user=staff或client区别看你程序设计是否方便。
问卷题目内容以这样的方式提交
q_(问卷id)_(题目id)=?
如
q_1_1="选择1"

多项选择
q_1_1=选择1,选择2


视问卷类型的不同，还有会以下的值

如果类型为staff的员工问卷
username=?

如果类型为client的顾客问卷
name=?
city=?
tel=?
vip=?

返回结果：
{
	"type" : "question_submit",
	"result" : 1,
	"message" : "成功提交",
}


feedback.json
直接别传feedback内容为参数

返回结果：
{
	"type" : "。。。",
	"result" : 1,
	"message" : "成功提交",
}

##  7.10 add by kinfen 本修改涉及店铺陈列、店铺地址以及渔民同乐

wharf_team.json
gallary列表元素修改

 	"gallary" 中的
-		"/img/wharf/team_bigPic.png",
改成
+		{
+			"category":"快速栏目1",
+			"list" : [
+				{"name":"图片1", "src":"/img/wharf/team_bigPic.png"},
+				{"name":"图片1", "src":"/img/wharf/team_bigPic.png"},
+				{"name":"图片1", "src":"/img/wharf/team_bigPic.png"},
+				{"name":"图片1", "src":"/img/wharf/team_bigPic.png"},
+				{"name":"图片1", "src":"/img/wharf/team_bigPic.png"}
+			]
+		},

后台的渔民同乐栏目图片将以子栏目承载

store_display.json

修改与wharf_team.json一致
逻辑：如果陈列的二级栏目栏目有子栏目，将使用{name:src:}元素，无没有子栏目，可继续使用字符串作元素

storelist.html
-	<meta name="viewport" content="width=455, height=528, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
修改为
+	<meta name="viewport" content="width=317, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />


## 7.21 dd by kinfen

display_windows.json

gallary数组的元素由

{"title":"窗口标题1", "preview" : "/img/poster/graylogo.png" , "pic":"/img/poster/banner1.png"},

改成
{
		"title":"窗口标题1", "preview" : "/img/poster/graylogo.png" , 
		"list" : [
			"/img/poster/banner1.png",
			"/img/poster/banner1.png",
			"/img/poster/banner1.png"
		]
}，
橱窗图片内容部分支持多张图片


 sets_list.json

 list的数组元素由
{
	"id" : 1,
	"preview" : "/img/sets/sets_category.png"
},

改成
{
	"background" : "/img/sets/sets_bg0.png",
	"title" : "2014冬",
	"collocation_tips" : 
	[
		{
			"产品名称" : "连衣裙",
			"款式名称" : "花绽缤纷",
			"款式编号" : "F14D0065",
			"款    式" : "黑"
		},
		{
			"产品名称" : "连衣裙",
			"款式名称" : "花绽缤纷",
			"款式编号" : "F14D0065",
			"款    式" : "黑"
		},
		{
			"产品名称" : "连衣裙",
			"款式名称" : "花绽缤纷",
			"款式编号" : "F14D0065",
			"款    式" : "黑"
		},
		{
			"产品名称" : "连衣裙",
			"款式名称" : "花绽缤纷",
			"款式编号" : "F14D0065",
			"款    式" : "黑"
		}
	],
	"collocation_pics" : 
	[
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png",
		"/img/sets/collocation_pic.png"
	]
}

作用是整合下一步的加载接口collocation的"collocation_tips"和collocation_pics元素，
collocation接口不再被需要。
更新了一个图片尺寸的excel说明文档，为普清标准。

## 7.26 add by kinfen

poster_category.json(json/poster)
原接口使用目录为海报大片, 当季故事将改名将使用同一模板，
接口更名为coverflow_album, 
参数:cid
以栏目cid作为父栏目id传值。

wharf_main.json(json/wharf)
更名为sub_category，
参数:cid
陈列部分增加一个模板，同样使用该接口格式，用cid作为父栏目id传值



## 7.27 add by kinfen
wharf_main.json(json/wharf)可以不用改名，

因为陈列那部分已经有类似的接口（displayCategory）



display_category.json(json/displayCategory)
统一数组属性名为cagegory,所以这里的cagegorys的's'需要去掉

原数组元素
{
	"cid" : 1,
	"name" : "季节陈列指引",
	"templet" : "pic"
},
修改成
{
	"cid" : 1,
	"name" : "Visual Merchandising",
	"name_cn" : "季节陈列指引",
	"pic" : "/img/wharf/wharf_cate_address.png",
	"templet" : "pic"
},

其中栏目名分中英文，中文部分移至name_cn，这是为了与wharf接口保持一致，（可以与wharf整合为一个接口模板，查需要提供cid作为传参）


## 7.28 add by kinfen

json/storiesmain
增加id作为参数，值为栏目id，
数组元素中增加id属性，值为子栏目的栏目id.


/json/regist

前端在注册页面增加文本框——所属店铺
注册增加一个参数 regstore


## 7.31 add by kinfen 修改了 questionaire的接口的选择项表现方式。
questionaire.json
由
-			"choice" : ["选择1", "选择2", "选择3","选择14", "选择5", "选择6"],
改为
+			"choice" : [{"no":"A","option":"选择1"}, {"no":"B","option":"选择1"}, {"no":"C","option":"选择1"}],


## 8.26 add by kinfen

修改了categorys接口

json/categorys

增加参数ver ，测试版将传值1.1,以上线的正式版则没有传值，用作区分正式版或测试版的输出内容。测试版1.1的内容中将多一个栏目，你看怎么处理合理。修改尽量不影响正式版的功能。

增加属性backgroud,表示主页的背景，可发布可更换
data的对象列增加id属性，如下

		{
			"id" : 1234,
			"name" : "BRANK",
			"pic" : "/img/category/brand.png",
			"name_cn" : "品牌介绍"
		},


接口更改详情请见git对比












